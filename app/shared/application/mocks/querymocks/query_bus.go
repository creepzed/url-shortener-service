// Code generated by mockery v2.12.2. DO NOT EDIT.

package querymocks

import (
	context "context"
	testing "testing"

	query "github.com/creepzed/url-shortener-service/app/shared/application/query"
	mock "github.com/stretchr/testify/mock"
)

// QueryBus is an autogenerated mock type for the QueryBus type
type QueryBus struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, qry
func (_m *QueryBus) Execute(ctx context.Context, qry query.Query) (query.Result, error) {
	ret := _m.Called(ctx, qry)

	var r0 query.Result
	if rf, ok := ret.Get(0).(func(context.Context, query.Query) query.Result); ok {
		r0 = rf(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, query.Query) error); ok {
		r1 = rf(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: qryType, handler
func (_m *QueryBus) Register(qryType query.Type, handler query.Handler) {
	_m.Called(qryType, handler)
}

// NewQueryBus creates a new instance of QueryBus. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryBus(t testing.TB) *QueryBus {
	mock := &QueryBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
