// Code generated by mockery v2.12.2. DO NOT EDIT.

package storagemocks

import (
	context "context"

	domain "github.com/creepzed/url-shortener-service/app/shortener/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	vo "github.com/creepzed/url-shortener-service/app/shared/domain/vo"
)

// UrlShortenerRepository is an autogenerated mock type for the UrlShortenerRepository type
type UrlShortenerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, urlShortener
func (_m *UrlShortenerRepository) Create(ctx context.Context, urlShortener domain.UrlShortener) error {
	ret := _m.Called(ctx, urlShortener)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UrlShortener) error); ok {
		r0 = rf(ctx, urlShortener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, urlId
func (_m *UrlShortenerRepository) FindById(ctx context.Context, urlId vo.UrlId) (domain.UrlShortener, error) {
	ret := _m.Called(ctx, urlId)

	var r0 domain.UrlShortener
	if rf, ok := ret.Get(0).(func(context.Context, vo.UrlId) domain.UrlShortener); ok {
		r0 = rf(ctx, urlId)
	} else {
		r0 = ret.Get(0).(domain.UrlShortener)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, vo.UrlId) error); ok {
		r1 = rf(ctx, urlId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, urlShortener
func (_m *UrlShortenerRepository) Update(ctx context.Context, urlShortener domain.UrlShortener) error {
	ret := _m.Called(ctx, urlShortener)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UrlShortener) error); ok {
		r0 = rf(ctx, urlShortener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUrlShortenerRepository creates a new instance of UrlShortenerRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUrlShortenerRepository(t testing.TB) *UrlShortenerRepository {
	mock := &UrlShortenerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
