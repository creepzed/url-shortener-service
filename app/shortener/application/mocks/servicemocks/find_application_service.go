// Code generated by mockery v2.12.2. DO NOT EDIT.

package servicemocks

import (
	context "context"

	finding "github.com/creepzed/url-shortener-service/app/shortener/application/finding"
	mock "github.com/stretchr/testify/mock"

	query "github.com/creepzed/url-shortener-service/app/shared/application/query"

	testing "testing"
)

// FindApplicationService is an autogenerated mock type for the FindApplicationService type
type FindApplicationService struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, _a1
func (_m *FindApplicationService) Do(ctx context.Context, _a1 finding.FindUrlShortenerQuery) (query.Result, error) {
	ret := _m.Called(ctx, _a1)

	var r0 query.Result
	if rf, ok := ret.Get(0).(func(context.Context, finding.FindUrlShortenerQuery) query.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, finding.FindUrlShortenerQuery) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindApplicationService creates a new instance of FindApplicationService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindApplicationService(t testing.TB) *FindApplicationService {
	mock := &FindApplicationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
